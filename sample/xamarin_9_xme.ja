*****h3*****
この記事の内容
*****h1*****
第 3 部です。XAML マークアップ拡張機能XAML Markup Extensions
*****h3*****
この記事の内容
XAML マークアップ拡張機能は、オブジェクトまたはその他のソースから直接参照されている値に設定するプロパティを XAML で重要な機能を構成します。XAML マークアップ拡張機能は、オブジェクトの共有と、アプリケーション全体で使用される定数を参照するにとって特に重要ですが、データ バインドで、最大のユーティリティを検索します。
*****h2*****
XAML マークアップ拡張機能XAML Markup Extensions
一般に、XAML を使用して、文字列、数値、列挙体のメンバー、またはバック グラウンドでの値に変換される文字列などの明示的な値をオブジェクトのプロパティを設定します。
場合によっては、ただし、プロパティは、それ以外の場合、どこかに定義された値に代わりに参照する必要があります。または実行時にコードをほとんど処理が必要な場合があります。このため、XAMLマークアップ拡張機能利用できます。
これらの XAML マークアップ拡張機能は、XML の拡張機能ではされません。XAML は、完全に有効な XML です。"Extensions"と呼ばれているは、実装するクラス内のコードでのバックアップがあるためIMarkupExtensionします。独自のカスタム マークアップ拡張機能を記述することができます。
多くの場合、XAML マークアップ拡張機能は XAML ファイルですぐに認識できるため、中かっこで区切られた属性の設定として表示されます。{および} が、従来型の要素としてマークアップでマークアップ拡張機能の表示場合があります。
*****h2*****
一部の XAML ページには、同じ値に設定されたプロパティを持ついくつかのビューが含まれます。たとえば、これらのプロパティの設定の多くButtonオブジェクトが等しい。
を変更するこれらのプロパティのいずれかの必要がある場合は、3 回ではなく、1 回だけ変更できます。これがコードの場合、するを使用する可能性定数と静的な読み取り専用オブジェクト一貫して簡単に変更してこのような値を保つためにします。
1 つの一般的なソリューション、XAML では、このような値を格納するまたは内のオブジェクトをリソース ディクショナリします。VisualElementクラスという名前のプロパティを定義するResources型のResourceDictionary、型のキーを持つディクショナリであるstring型の値とobjectします。このディクショナリにオブジェクトを配置し、それらを XAML ですべてのマークアップから参照できます。
ページ上をリソース ディクショナリを使用するには、ペアをインクルードResourcesプロパティ要素タグ。これらのページの上部に配置すると便利です。
明示的に指定する必要もResourceDictionaryタグ。
今すぐオブジェクトとさまざまな種類の値は、リソース ディクショナリに追加できます。これらの型をインスタンス化可能にする必要があります。抽象クラスをたとえばすることはできません。これらの型は、パブリック コンス トラクターも必要です。各項目で指定されたディクショナリのキーが必要です、x:Key属性。
これら 2 つの項目は、構造型の値LayoutOptionsとには、一意のキーと 1 つまたは 2 つのプロパティを設定します。コードとマークアップではの静的フィールドを使用して一般的なLayoutOptions、ここでプロパティを設定する方が便利ですが。
設定する必要があるので、HorizontalOptionsとVerticalOptionsこれらのリソースでは、これらのボタンのプロパティと、そのために、 StaticResource XAML マークアップ拡張機能。
StaticResourceマークアップ拡張機能は、常に、中かっこで区切られます、ディクショナリのキーが含まれています。
Forms もサポートします。DynamicResource dictionary のキーに関連付けられた実行中に変わる可能性がある値の中にStaticResourceページ上の要素を構築するときに 1 回では、ディクショナリから要素にアクセスします。
BorderWidthプロパティは、double 型の値をディクショナリに格納するために必要です。
次の 3 つの行に配置する必要はありません。この回転角の場合は、このディクショナリ エントリは、わずか 1 行上。
これら 2 つのリソースと同じ方法で参照できる、LayoutOptions値。
種類のリソースに対するColor、直接これらの型の属性を割り当てるときに使用する同じ文字列形式を使用することができます。型コンバーターは、リソースが作成されるときに呼び出されます。
多くの場合、プログラムのセットをFontSizeプロパティのメンバーをNamedSizeなど列挙Largeします。FontSizeConverterクラスを使用して、プラットフォームに依存する値に変換する背後のしくみ、Device.ただし、フォント サイズのリソースを定義するときに行う方を示す数値を使用して、ここで、x:Double型。
これですべてのプロパティを除くTextリソースの設定によって定義されます。
使用することもOnPlatformプラットフォーム用の別の値を定義するリソース ディクショナリ内で。ここでは、方法、OnPlatformオブジェクトが別のテキストの色をリソース ディクショナリの一部にすることができます。
注意してOnPlatform両方を取得、x:Key属性ディクショナリ内のオブジェクトは、およびx:TypeArguments属性、ジェネリック クラスは、します。
3 つのボタンが 6 つの共有値へのアクセスを持つ最後の完全な XAML ファイルを次に示します。
スクリーン ショットは、一貫性のあるスタイル、およびプラットフォームに依存するスタイル設定を確認します。
定義する最も一般的です、 Resources 、ページの上部にあるコレクションに留意する、Resourcesによってプロパティが定義されているVisualElement、持つことが可能Resourcesページ上の他の要素のコレクション。たとえば、を 1 つを追加してみてください、StackLayoutこの例では。
ボタンのテキストの色が青になったことがわかるでしょう。XAML パーサーが検出されるたびに、基本的に、StaticResourceマークアップ拡張機能、ビジュアル ツリーを検索し、1 つ目を使用して、ResourceDictionaryそのキーを格納しているが発生しました。
リソース ディクショナリに格納されたオブジェクトの最も一般的な種類の 1 つは、Xamarin.FormsStyleプロパティの設定のコレクションを定義します。スタイルは、情報の記事で説明したスタイルします。
初めて使用する XAML 開発者疑問ビジュアル要素をなど、配置できるかどうかLabelまたはButtonで、ResourceDictionaryします。間違いなくことはできますが、あまり意味がをなさない。目的、ResourceDictionaryオブジェクトを共有することです。視覚的要素を共有することはできません。1 ページに 2 回、同じインスタンスは使用できません。
*****h2*****
その名前の類似x:StaticとStaticResourceは大きく異なります。StaticResource 中にリソース ディクショナリからオブジェクトを返しますx:Static次のいずれかにアクセスします。
StaticResourceマークアップ拡張機能は、リソース ディクショナリを定義する XAML の実装でサポートされています。中にx:Staticとして、XAML の組み込みの一部である、xプレフィックスが表示されます。
ここでは、いくつかの例を示す方法x:Static静的フィールドおよび列挙型メンバーを明示的に参照できます。
ここまでは、これはそれほどたいしたものではありません。So far, this is not very impressive. x:Staticマークアップ拡張機能も参照できます静的フィールドまたはプロパティ、独自のコードから。たとえば、ここでは、AppConstantsアプリケーション全体で複数のページを使用するいくつかの静的フィールドを含むクラス。
XAML ファイルでこのクラスの静的フィールドを参照するには、何らかの方法をこのファイルは、XAML ファイル内で示す必要があります。これは、XML 名前空間宣言で行います。
標準の Xamarin.Forms XAML テンプレートの一部として作成された XAML ファイルに 2 つの XML 名前空間宣言が含まれていることを思い出してください。Forms クラスと別のタグと XAML に固有の属性を参照するためにアクセスするための 1 つ。
その他のクラスにアクセスする XML 名前空間宣言を追加する必要があります。各追加の XML 名前空間宣言は、新しいプレフィックスを定義します。共有アプリケーションの .NET Standard ライブラリのローカル クラスへのアクセスなどにAppConstants、XAML のプログラマは多くの場合、プレフィックスを使用してlocalします。名前空間の宣言は、CLR (共通言語ランタイム) の名前空間の名前とも呼ばれる .NET 名前空間の名前、これは、c# で表示される名前を示す必要がありますnamespace定義または、usingディレクティブ。
NET Standard ライブラリを参照するアセンブリでの .NET 名前空間の XML 名前空間宣言を定義することもできます。たとえば、次に示します、sys標準の .NET のプレフィックスSystem内にある名前空間、 mscorlibアセンブリでは、「Microsoft 共通オブジェクト ランタイム ライブラリ、」縦 1 回が、"多言語標準を今すぐ意味共通オブジェクト ランタイム Library"です。これは別のアセンブリであるため、する必要がありますも指定するアセンブリ名では、ここでmscorlib:Because this is another assembly, you must also specify the assembly name, in this case mscorlib:
注意キーワードclr-namespaceコロンと .NET 名前空間名は、セミコロン、キーワードの後に続くassembly、等号 (=) と、アセンブリ名。
はい、コロンclr-namespace等号がassemblyします。この意図定義された構文: 最も XML 名前空間宣言など、URI スキーム名を開始する URI を参照するhttpコロンが後に常にします。
これら両方の名前空間宣言が含まれている、 StaticConstantsPageサンプル。注意、BoxViewディメンションに設定されますMath.E100 の倍数ではスケール。
結果のサイズBoxView画面を基準とは、プラットフォームに依存します。
*****h2*****
他の標準のマークアップ拡張機能Other Standard Markup Extensions
いくつかのマークアップ拡張機能では、XAML に固有し、Xamarin.Forms XAML ファイルでサポートされています。これらのいくつか非常に多くの場合は使用されませんが、必要なときに不可欠です。
*****h2*****
マークアップ拡張機能では、プロパティを使用できますが、XML 属性のように設定されていません。マークアップ拡張機能では、プロパティの設定がコンマで区切られ、中かっこ内の引用符が表示されません。
これは、マークアップ拡張機能の Xamarin.Forms という名前を使用して説明できますConstraintExpressionで使用される、RelativeLayoutクラス。定数の場合、または親であるかその他の名前付きビューに対する相対位置または子ビューのサイズを指定できます。構文、ConstraintExpression位置またはを使用してビューのサイズを設定できます、Factor時間別のビューのプロパティおよびConstantします。複雑なコードが必要です。
次に例を示します。
おそらく、マークアップ拡張機能の構文は、このサンプルから行う必要があります、最も重要なレッスンです。引用符がマークアップ拡張機能の中かっこ内で表示する必要がありますされません。XAML ファイルにマークアップ拡張機能を入力するときに、プロパティの値を引用符で囲みますする自然なです。しないでください。
実行中のプログラムを次に示します。
*****h2*****
まとめSummary
ここで示すように XAML マークアップ拡張機能は、XAML ファイルの重要なサポートを提供します。おそらく最も重要な XAML マークアップ拡張機能ですが、 Binding、このシリーズの次の部分で説明されるパート 4 です。データ バインディングの基礎します。
*****h2*****
関連リンクRelated Links
*****h2*****
フィードバック
お客様のご意見をお寄せください。お寄せいただく内容の種類を選択:
この新しいフィードバック システムは、GitHub Issues を利用して構築されています。この変更については、こちらのブログ記事をご覧ください。
*****h3*****
フィードバックを読み込んでいます...
